(()=>{"use strict";class e{list(){}get(){}create(){}update(){}delete(){}}class t extends e{}const s=document.getElementById("root");new class{constructor(e){this.container=e,this.api=new t,this.websocket=null,this.currentUser=null,this.lastSentMessageId=null,this.users=[],this.nicknameModal=document.getElementById("nicknameModal"),this.nicknameInput=document.getElementById("nicknameInput"),this.continueBtn=document.getElementById("continueBtn"),this.errorText=document.getElementById("errorText"),this.chatContainer=document.getElementById("chatContainer"),this.messagesContainer=document.getElementById("messagesContainer"),this.messageInput=document.getElementById("messageInput"),this.userList=document.getElementById("userList")}init(){this.bindToDOM(),this.registerEvents(),this.connectWebSocket()}bindToDOM(){this.userList=document.getElementById("userList"),this.userList||console.error("Элемент userList не найден")}registerEvents(){this.continueBtn.addEventListener("click",(()=>this.onEnterChatHandler())),this.messageInput.addEventListener("keypress",(e=>{"Enter"===e.key&&this.sendMessage()})),window.addEventListener("beforeunload",(()=>{this.handleDisconnect()}))}connectWebSocket(){this.websocket=new WebSocket("wss://chat-backend-7jii.onrender.com"),this.websocket.onopen=()=>{console.log("WebSocket соединение установлено"),this.requestUserList(),this.currentUser&&this.sendUserJoin()},this.websocket.onmessage=e=>{try{const t=JSON.parse(e.data);console.log("Получены данные:",t),Array.isArray(t)?(this.users=t,this.updateUserList()):t.users?(this.users=t.users,this.updateUserList()):"user-joined"===t.type||"user-left"===t.type?this.requestUserList():"send"===t.type?this.handleIncomingMessage(t):"nickname-error"===t.type&&(this.showError(t.message),this.currentUser=null)}catch(e){console.error("Ошибка парсинга сообщения:",e)}},this.websocket.onclose=()=>{console.log("WebSocket соединение закрыто"),setTimeout((()=>{this.connectWebSocket(),this.requestUserList()}),5e3)},this.websocket.onerror=e=>{console.error("WebSocket ошибка:",e)}}sendUserJoin(){this.websocket.readyState===WebSocket.OPEN&&this.websocket.send(JSON.stringify({type:"new-user",user:this.currentUser}))}requestUserList(){this.websocket.readyState===WebSocket.OPEN&&this.websocket.send(JSON.stringify({type:"get-users"}))}handleDisconnect(){this.websocket&&this.websocket.readyState===WebSocket.OPEN&&this.currentUser&&this.websocket.send(JSON.stringify({type:"exit",user:this.currentUser}))}onEnterChatHandler(){const e=this.nicknameInput.value.trim();e?this.checkNicknameAvailability(e):this.showError("Пожалуйста, введите никнейм")}showError(e){this.errorText.textContent=e,setTimeout((()=>this.errorText.textContent=""),3e3)}checkNicknameAvailability(e){this.users.some((t=>t.name.toLowerCase()===e.toLowerCase()))?this.showError("Этот никнейм уже занят"):(this.currentUser={id:this.generateUUID(),name:e},this.websocket.readyState===WebSocket.OPEN?(this.sendUserJoin(),this.nicknameModal.classList.remove("active"),this.chatContainer.classList.remove("hidden"),this.messageInput.focus()):this.showError("Нет соединения с сервером"))}updateUserList(){if(console.log("Обновление списка пользователей:",this.users),console.log("Текущий пользователь:",this.currentUser),this.userList){if(this.userList.innerHTML="",!this.users||0===this.users.length){const e=document.createElement("li");return e.className="chat__user",e.textContent="Нет активных пользователей",void this.userList.appendChild(e)}this.users.forEach((e=>{const t=document.createElement("li");t.className="chat__user",t.textContent=e.name,this.currentUser&&e.id===this.currentUser.id&&(t.textContent+=" (Вы)",t.style.fontWeight="bold",t.style.color="#2c82e0"),this.userList.appendChild(t)}))}else console.error("Элемент userList не найден")}handleIncomingMessage(e){if(e&&e.type&&"send"===e.type){const t=this.currentUser&&e.user.id===this.currentUser.id;if(t&&this.lastSentMessageId===e.tempId)return void(this.lastSentMessageId=null);this.renderMessage(e,t)}}sendMessage(){const e=this.messageInput.value.trim();if(!e||!this.currentUser)return;const t={type:"send",message:e,user:this.currentUser,tempId:this.generateUUID()};this.lastSentMessageId=t.tempId,this.renderMessage(t,!0),this.websocket.readyState===WebSocket.OPEN?this.websocket.send(JSON.stringify(t)):this.showError("Нет соединения с сервером"),this.messageInput.value=""}renderMessage(e,t){const s=document.createElement("div");s.className="message__container "+(t?"message__container-yourself":"message__container-interlocutor");const n=t?"You":e.user.name,r=(new Date).toLocaleTimeString([],{hour:"2-digit",minute:"2-digit"}),i=(new Date).toLocaleDateString();s.innerHTML=`\n      <div class="message__header">${n}, ${r} ${i}</div>\n      <div class="message__text">${e.message}</div>\n    `,this.messagesContainer.appendChild(s),this.messagesContainer.scrollTop=this.messagesContainer.scrollHeight}generateUUID(){return crypto.randomUUID?crypto.randomUUID():"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){const t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)}))}}(s).init()})();